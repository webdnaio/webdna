<?php

namespace WebDNA\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

use WebDNA\Bundle\AppBundle\Entity\Event;
use WebDNA\Bundle\AppBundle\Entity\Website;
use WebDNA\Bundle\AppBundle\Repository\Interfaces\EventRepositoryInterface;
use WebDNA\Bundle\AppBundle\Entity\ItemAnalysis;
use WebDNA\Bundle\AppBundle\Entity\AnalysisProcess;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository implements EventRepositoryInterface
{
    /**
     * @param Event $event
     * @return mixed|void
     */
    public function save(Event $event)
    {
        $this->_em->persist($event);

        return $this->_em->flush();
    }

    /**
     * @param void
     * @return Int
     */
    public function countAll()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT COUNT(e.id) FROM WebDNAAppBundle:Event e')
            ->getSingleScalarResult();
    }

    /**
     * @param Website $website
     * @param int $offset
     * @param int $limit
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByWebsite(Website $website, $offset = 0, $limit = 50)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('e')
            ->from('WebDNAAppBundle:Event', 'e')
            ->where('e.website = :websiteId')
            ->setParameter('websiteId', $website->getId())
            ->orderBy('e.id', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        return $qb->getQuery()->execute();
    }
}
