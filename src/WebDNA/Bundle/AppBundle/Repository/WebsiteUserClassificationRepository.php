<?php

namespace WebDNA\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use WebDNA\Bundle\AppBundle\Entity\ItemAnalysis;
use WebDNA\Bundle\AppBundle\Entity\Website;
use WebDNA\Bundle\AppBundle\Entity\WebsiteUserClassification;
use WebDNA\Bundle\AppBundle\Repository\Interfaces\WebsiteUserClassificationRepositoryInterface;
use WebDNA\Bundle\UserBundle\Entity\User;

/**
 * WebsiteUserClassificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WebsiteUserClassificationRepository extends EntityRepository implements WebsiteUserClassificationRepositoryInterface
{
    /**
     * @param WebsiteUserClassification $websiteUserClassification
     * @return mixed|void
     */
    public function save(WebsiteUserClassification $websiteUserClassification)
    {
        $this->_em->persist($websiteUserClassification);

        return $this->_em->flush();
    }

    /**
     * @param void
     * @return Int
     */
    public function countAll()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT COUNT(wuc.id) FROM WebDNAAppBundle:WebsiteUserClassification wuc')
            ->getSingleScalarResult();
    }

    /**
     * @param Website $website
     * @param User $user
     * @return WebsiteUserClassification
     */
    public function findUserWebsiteClassification(Website $website, User $user)
    {
        return $this->findOneBy(
            array(
                'website' => $website,
                'user' => $user,
            )
        );
    }

    /**
     * @param WebsiteUserClassification $websiteUserClassification
     * @return mixed
     */
    public function remove(WebsiteUserClassification $websiteUserClassification)
    {
        $this->_em->remove($websiteUserClassification);

        return $this->_em->flush();
    }

    public function findClassifiedWebsites(User $user, $class = ItemAnalysis::CLASS_NEGATIVE)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->from('WebDNAAppBundle:WebsiteUserClassification', 'wuc')
            ->select('w.id, w.name')
            ->leftJoin('WebDNAAppBundle:Website', 'w', 'WITH', 'w.id=wuc.website')
            ->where('wuc.user=:user')
            ->andWhere('wuc.class=:class')
            ->setParameters(['user' => $user->getId(), 'class' => $class])
            ->getQuery()->getArrayResult();
    }
}
