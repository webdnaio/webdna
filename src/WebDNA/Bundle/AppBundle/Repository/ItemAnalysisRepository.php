<?php

namespace WebDNA\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\Lexer;
use Doctrine\ORM\QueryBuilder;
use WebDNA\Bundle\AppBundle\Entity\AnalysisProcess;
use WebDNA\Bundle\AppBundle\Entity\ItemAnalysis;
use WebDNA\Bundle\AppBundle\Entity\ItemMetric;
use WebDNA\Bundle\AppBundle\Entity\Page;
use WebDNA\Bundle\AppBundle\Entity\Website;
use WebDNA\Bundle\AppBundle\Repository\Interfaces\ItemAnalysisRepositoryInterface;

/**
 * ItemAnalysisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemAnalysisRepository extends EntityRepository implements ItemAnalysisRepositoryInterface
{
    /**
     * @param ItemAnalysis $itemAnalysis
     * @return mixed|void
     */
    public function save(ItemAnalysis $itemAnalysis)
    {
        $this->_em->persist($itemAnalysis);

        return $this->_em->flush();
    }

    /**
     * @param void
     * @return Int
     */
    public function countAll()
    {
        try {
            return $this->getEntityManager()
                ->createQuery('SELECT COUNT(ia.id) FROM WebDNAAppBundle:ItemAnalysis ia')
                ->getSingleScalarResult();
        } catch (NoResultException $e) {
            return 0;
        }
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @param array $criteria
     * @param int $offset
     * @param int $limit
     * @param array $sort
     * @return \Doctrine\ORM\AbstractQuery|\Doctrine\ORM\Query
     */
    public function findByAnalysisProcess(
        AnalysisProcess $analysisProcess,
        array $criteria = array(),
        $offset = 0,
        $limit = 25,
        array $sort = null
    ) {
        $qb = $this->findItems($analysisProcess, $offset, $sort);

        return $this->getItemsQuery($criteria, $limit, $qb);
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @param bool $reviewed
     * @return int
     */
    public function countByAnalysisProcess(
        AnalysisProcess $analysisProcess,
        $reviewed = false
    ) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('COUNT(DISTINCT ia.objectId)')
            ->from('WebDNAAppBundle:Page', 'p')
            ->innerJoin(
                'WebDNAAppBundle:ItemAnalysis',
                'ia',
                'WITH',
                'p.id=ia.objectId AND ia.analysisProcess=:analysisProcess'
            )
            ->groupBy('ia.analysisProcess')
            ->where('ia.status = :status')
            ->setParameters(
                [
                    'analysisProcess' => $analysisProcess->getId(),
                    'status' => ItemAnalysis::STATUS_COMPLETED
                ]
            );

        if ($reviewed === true) {
            $qb->leftJoin('WebDNAAppBundle:PageReview', 'pr', 'WITH', 'pr.page=p.id AND pr.website = :website')
                ->addGroupBy('pr.website')
                ->andWhere('pr.website IS NOT NULL')
                ->setParameter('website', $analysisProcess->getWebsite());
        }

        try {
            return (int)$qb->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            return 0;
        }
    }

    /**
     * @param QueryBuilder $qb
     * @return int
     */
    protected function countByAnalysisProcessForItemsQuery($qb)
    {
        $qb->select('COUNT(DISTINCT p.id)')
            ->groupBy('ia.analysisProcess')
            ->setFirstResult(0)
            ->setMaxResults(1);

        try {
            return (int)$qb->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            return 0;
        }
    }

    /**
     * @param array $criteria
     * @param $limit
     * @param $qb
     * @return \Doctrine\ORM\AbstractQuery|\Doctrine\ORM\Query
     */
    protected function getItemsQuery($criteria, $limit, QueryBuilder $qb)
    {
        if ($limit > 0) {
            $qb->setMaxResults($limit);
            $this->queryWherePartByAnalysisProcess($qb, $criteria);
            $count = $this->countByAnalysisProcessForItemsQuery(clone $qb);

            return $qb->getQuery()->setHint('knp_paginator.count', $count);
        } else {
            $this->queryWherePartByAnalysisProcess($qb, $criteria);

            return $qb->getQuery();
        }
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @param int $offset
     * @param array $sort
     * @return QueryBuilder
     */
    protected function findItems($analysisProcess, $offset, array $sort = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select(
                'ia, ia.id as itemAnalysisId,
                p.id AS pageId, IDENTITY(p.website) as websiteId, p.url as url, p.httpCode, p.effectiveUrl, ia.class,
                ia.reviewed, ia.classSystem, ia.classUser, pr.id as page_review_id, pm.anchor, pm.pointingLinksCount,
                pm.totalLinksOnSiteCount, pm.domainAuthority, pm.domainAge'
            )
            ->from('WebDNAAppBundle:Page', 'p')
            ->innerJoin(
                'WebDNAAppBundle:ItemAnalysis',
                'ia',
                'WITH',
                'p.id=ia.objectId AND ia.analysisProcess=:analysisProcess'
            )
            ->leftJoin(
                'WebDNAAppBundle:PageMetric',
                'pm',
                'WITH',
                'p.id=pm.page AND ia.id=pm.itemAnalysis AND pm.itemAnalysis IS NOT NULL'
            )
            ->leftJoin(
                'WebDNAAppBundle:ItemMetric',
                'im',
                'WITH',
                'im.itemAnalysis=ia.id'
            )
            ->leftJoin(
                'WebDNAAppBundle:PageReview',
                'pr',
                'WITH',
                'p.id=pr.page AND pr.website = :website'
            )
            ->where('ia.status = :status')
            ->groupBy('p.id')
            ->setFirstResult($offset)
            ->setParameters(
                [
                    'website' => $analysisProcess->getWebsite(),
                    'analysisProcess' => $analysisProcess->getId(),
                    'status' => ItemAnalysis::STATUS_COMPLETED
                ]
            );

        if (is_null($sort)) {
            $sort = ['column' => 'p.url', 'order' => 'asc'];
        }

        $sortColumnMap = [
            'url' => 'p.url',
            'class' => 'ia.class',
            'anchor' => 'pm.anchor',
            'pointing_links' => 'pm.pointingLinksCount',
            'total_links' => 'pm.totalLinksOnSiteCount',
            'domain_authority' => 'pm.domainAuthority',
            'domain_age' => 'pm.domainAge'
        ];

        if (isset($sortColumnMap[$sort['column']])) {
            $sort['column'] = $sortColumnMap[$sort['column']];
        }

        $sortFiltered = $this->sortWebsiteGroup($sort, ['column' => 'p.url', 'order' => 'ASC']);

        $qb->orderBy($sortFiltered['column'], $sortFiltered['order']);

        return $qb;
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @param array $criteria
     * @param int $offset
     * @param int $limit
     * @param array $sort
     * @param bool $withClassificationStats
     * @return \Doctrine\ORM\AbstractQuery|\Doctrine\ORM\Query
     */
    public function findByAnalysisProcessWebsiteGroup(
        AnalysisProcess $analysisProcess,
        array $criteria = array(),
        $offset = 0,
        $limit = 25,
        array $sort = null,
        $withClassificationStats = false
    ) {
        $select = 'ia, IDENTITY(p.website) as website_id, w.name, COUNT(ia.id) AS itemCount';
        if ($withClassificationStats === true) {
            $select .= ',
  SUM(CASE ia.class WHEN ' . ItemAnalysis::CLASS_UNCLASSIFIED . ' THEN 1 ELSE 0 END) AS unclassified,
  SUM(CASE ia.class WHEN ' . ItemAnalysis::CLASS_POSITIVE . ' THEN 1 ELSE 0 END) AS positive,
  SUM(CASE ia.class WHEN ' . ItemAnalysis::CLASS_NEGATIVE . ' THEN 1 ELSE 0 END) AS negative,
  SUM(CASE ia.class WHEN ' . ItemAnalysis::CLASS_SUSPICIOUS . ' THEN 1 ELSE 0 END) AS suspicious,
  SUM(CASE ia.class WHEN ' . ItemAnalysis::CLASS_UNKNOWN . ' THEN 1 ELSE 0 END) AS unknown';
        }

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->from('WebDNAAppBundle:ItemAnalysis', 'ia')
            ->select($select)
            ->where('ia.analysisProcess=:analysisProcess')
            ->andWhere('ia.type = :type')
            ->setParameters(
                [
                    'analysisProcess' => $analysisProcess->getId(),
                    'type' => ItemAnalysis::TYPE_PAGE
                ]
            )
            ->join('WebDNAAppBundle:Page', 'p', 'WITH', 'ia.objectId=p.id')
            ->leftJoin('WebDNAAppBundle:Website', 'w', 'WITH', 'p.website=w.id')
            ->groupBy('p.website');

        $sortFiltered = $this->sortWebsiteGroup($sort);

        $qb->orderBy($sortFiltered['column'], $sortFiltered['order']);

        return $this->getItemsQuery($criteria, 0, $qb);
    }

    /**
     * @param $sort
     * @param array $defaultSort
     * @return array
     */
    protected function sortWebsiteGroup($sort, $defaultSort = ['column' => 'itemCount', 'order' => 'DESC'])
    {
        if (is_null($sort)) {
            return $defaultSort;
        }

        if (isset($sort['column']) && isset($sort['order'])) {
            $allowedSortColumns = [
                'itemCount',
                'unclassified',
                'positive',
                'p.url',
                'ia.class',
                'negative',
                'suspicious',
                'unknown',
                'pm.pointingLinksCount',
                'pm.anchor',
                'pm.totalLinksOnSiteCount',
                'pm.domainAuthority',
                'pm.domainAge'
            ];

            if (!in_array(strtoupper($sort['order']), ['ASC', 'DESC'])) {
                return $defaultSort;
            }

            if (!in_array($sort['column'], $allowedSortColumns)) {
                return $defaultSort;
            }

            return $sort;
        } else {
            return $defaultSort;
        }
    }

    /**
     * @param array $ids
     * @return array
     */
    public function countItemClasses($ids)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(ia.class) as classCount')
            ->from('WebDNAAppBundle:ItemAnalysis', 'ia')
            ->leftJoin(
                'WebDNAAppBundle:Website',
                'w',
                'WITH',
                'w.id=ia.objectId AND ia.type=:type'
            )
            ->groupBy('ia.class')
            ->where('ia.objectId IN(:ids)')
            ->setParameters(['ids' => $ids, 'type' => ItemAnalysis::TYPE_WEBSITE]);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param QueryBuilder $qb
     * @param array $criteria
     * @return void
     */
    protected function queryWherePartByAnalysisProcess(QueryBuilder &$qb, array $criteria = array())
    {
        if (isset($criteria['type'])) {
            $qb->andWhere('ia.type IN(:item_type)')
                ->setParameter('item_type', $criteria['type']);
        }

        if (isset($criteria['class'])) {
            $qb->andWhere('ia.class IN(:class)')
                ->setParameter('class', $criteria['class']);
        }

        if (isset($criteria['class_user']) && $criteria['class_user'] == 1) {
            $qb->andWhere('ia.classUser > 0');
        }

        if (isset($criteria['class_user']) && $criteria['class_user'] == 0) {
            $qb->andWhere('ia.classUser = 0');
        }

        if (isset($criteria['website'])) {
            $qb->andWhere('p.website = :cr_website')
                ->setParameter('cr_website', $criteria['website']);
        }

        // found
        if (isset($criteria['foundLinks']) && $criteria['foundLinks'] == 1) {
            $qb->andWhere('im.type = :metric_type AND (im.value_numeric_4 > 0 OR im.value_numeric_5 > 0)')
                ->setParameter('metric_type', ItemMetric::TYPE_DOCUMENT_LINKS_ATTR_FOLLOW_METRIC);
        }

        // not found
        if (isset($criteria['foundLinks']) && $criteria['foundLinks'] == 0) {
            $qb->andWhere('im.type = :metric_type AND (im.value_numeric_4 = 0 AND im.value_numeric_5 = 0)')
                ->setParameter('metric_type', ItemMetric::TYPE_DOCUMENT_LINKS_ATTR_FOLLOW_METRIC);
        }

        // follow
        if (isset($criteria['foundFollow']) && $criteria['foundFollow'] == 1) {
            $qb->andWhere('im.type = :metric_type AND (im.value_numeric_4 > 0 AND im.value_numeric_5 = 0)')
                ->setParameter('metric_type', ItemMetric::TYPE_DOCUMENT_LINKS_ATTR_FOLLOW_METRIC);
        }

        // nofollow
        if (isset($criteria['foundFollow']) && $criteria['foundFollow'] == 0) {
            $qb->andWhere('im.type = :metric_type AND (im.value_numeric_5 > 0)')
                ->setParameter('metric_type', ItemMetric::TYPE_DOCUMENT_LINKS_ATTR_FOLLOW_METRIC);
        }

        if (isset($criteria['malware'])) {
            $qb->andWhere('im.type = :metric_type AND (im.value_numeric_1 > 0)')
                ->setParameter('metric_type', ItemMetric::TYPE_URL_SECURITY_METRIC);
        }

        if (isset($criteria['reviewed']) && $criteria['reviewed'] == 0) {
            $qb->andWhere('pr.id IS NULL');
        }

        if (isset($criteria['reviewed']) && $criteria['reviewed'] == 1) {
            $qb->andWhere('pr.id IS NOT NULL');
        }

        if (isset($criteria['httpCode']) && is_numeric($criteria['httpCode'])) {
            $qb->andWhere('p.httpCode = :httpCode')
                ->setParameter('httpCode', $criteria['httpCode']);
        }
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @return int
     */
    public function countAnalyzedDomains(AnalysisProcess $analysisProcess)
    {
        try {
            $qb = $this->getEntityManager()->createQueryBuilder()
                ->select(
                    'COUNT(DISTINCT p.website) as itemCount'
                )
                ->from('WebDNAAppBundle:Page', 'p')
                ->innerJoin(
                    'WebDNAAppBundle:ItemAnalysis',
                    'ia',
                    'WITH',
                    'p.id=ia.objectId AND ia.analysisProcess=:analysisProcess'
                )
                ->leftJoin(
                    'WebDNAAppBundle:Website',
                    'w',
                    'WITH',
                    'w.id=p.website'
                )
                ->addGroupBy('ia.analysisProcess')
                ->setParameters(
                    [
                        'analysisProcess' => $analysisProcess->getId(),
                    ]
                );

            return (int)$qb->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            return 0;
        }
    }

    /**
     * Finds unclassified item analyzes.
     *
     * @param int $type
     * @param int $offset
     * @param int $limit
     * @return mixed
     */
    public function findUnclassified($type, $offset = 0, $limit = 50)
    {
        return $this->findBy(
            array(
                'type' => ItemAnalysis::TYPE_PAGE,
                'class' => ItemAnalysis::CLASS_UNCLASSIFIED,
            ),
            array(),
            $limit,
            $offset
        );
    }

    /**
     * Count classes by $analysisProcess
     *
     * @param AnalysisProcess $analysisProcess
     * @return array|null
     */
    public function countClasses(AnalysisProcess $analysisProcess)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('ia.class, count(DISTINCT ia.objectId) as counter')
            ->from('WebDNAAppBundle:ItemAnalysis', 'ia')
            ->where('ia.analysisProcess IN(:id)')
            ->andWhere('ia.type = :type')
            ->setParameter('id', $analysisProcess->getId())
            ->setParameter('type', ItemAnalysis::TYPE_PAGE)
            ->groupBy('ia.class');

        $counters = $qb->getQuery()->getArrayResult();

        // @TODO Since INDEX BY doesn't work with leftJoin workaround is needed
        $result = [
            ItemAnalysis::CLASS_POSITIVE => 0,
            ItemAnalysis::CLASS_NEGATIVE => 0,
            ItemAnalysis::CLASS_SUSPICIOUS => 0,
            ItemAnalysis::CLASS_UNCLASSIFIED => 0,
            ItemAnalysis::CLASS_UNKNOWN => 0,
        ];

        if (!empty($counters)) {
            foreach ($counters as $counter) {
                $result[$counter['class']] = $counter['counter'];
            }
        }

        return $result;
    }

    /**
     * @param Website $website
     * @return \Doctrine\ORM\Query
     */
    protected function getItemAnalyzesByWebsite(Website $website)
    {
        return $this->getEntityManager()->createQuery(
            'select IDENTITY(p.itemAnalysis) from WebDNAAppBundle:Page p where p.website = ' . $website->getId()
        );
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @param Website $website
     * @param int $class
     * @return mixed
     */
    public function setWebsiteClassUser(AnalysisProcess $analysisProcess, Website $website, $class)
    {
        //        $qb1 = $this->getItemAnalyzesByWebsite($website);

//        $qb2 = $this->getEntityManager()->createQueryBuilder();

        return $this->getEntityManager()->getConnection()->prepare(
            '
            UPDATE item_analysis ia
            INNER JOIN page p on p.id=ia.object_id
            SET ia.class_user = ' . intval($class) . ', ia.class = ' . intval($class) . '
            WHERE ia.analysis_process_id = ' . $analysisProcess->getId() . '
            AND p.website_id = ' . $website->getId() . '
        '
        )->execute();

        /*
        return $qb2->update('WebDNAAppBundle:ItemAnalysis', 'ia')
            ->set('ia.classUser', $class)
            ->set('ia.class', $class)
            ->where('ia.analysisProcess = :analysisProcessId')
            ->setParameter('analysisProcessId', $analysisProcess->getId())
            ->andWhere('ia.id ' . $qb2->expr()->in('', $qb1->getDQL()))
            ->getQuery()->getSQL());
        */
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @param Website $website
     * @return mixed
     */
    public function revertDefaultWebsiteClass(AnalysisProcess $analysisProcess, Website $website)
    {
        //        $qb1 = $this->getItemAnalyzesByWebsite($website);

//        $qb2 = $this->getEntityManager()->createQueryBuilder();

        return $this->getEntityManager()->getConnection()->prepare(
            '
            UPDATE item_analysis ia
            INNER JOIN page p on p.id=ia.object_id
            SET ia.class_user = 0, ia.class = ia.class_system
            WHERE ia.analysis_process_id = ' . $analysisProcess->getId() . '
            AND p.website_id = ' . $website->getId() . '
        '
        )->execute();

        /*
        return $qb2->update('WebDNAAppBundle:ItemAnalysis', 'ia')
            ->set('ia.class', 'ia.classSystem')
            ->set('ia.classUser', 0)
            ->where('ia.analysisProcess = :analysisProcessId')
            ->setParameter('analysisProcessId', $analysisProcess->getId())
            ->andWhere('ia.id ' . $qb2->expr()->in('', $qb1->getDQL()))
            ->getQuery()->execute();
        */
    }

    /**
     * @param AnalysisProcess $currentAnalysisProcess
     * @param AnalysisProcess $previousAnalysisProcess
     * @return array
     */
    public function getDiffUrls(AnalysisProcess $currentAnalysisProcess, AnalysisProcess $previousAnalysisProcess)
    {
        $qb_sub = $this->getEntityManager()->createQueryBuilder()
            ->select('p2.id')
            ->from('WebDNAAppBundle:ItemAnalysis', 'ia2')
            ->innerJoin(
                'WebDNAAppBundle:Page',
                'p2',
                'WITH',
                'p2.id=ia2.objectId AND ia2.analysisProcess=:analysisProcess'
            )
            ->where('ia2.type = :type');
        $qb_sub->setParameters(
            ['type' => ItemAnalysis::TYPE_PAGE, 'analysisProcess' => $currentAnalysisProcess->getId()]
        );

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('p1.url, p1.id as pageId')
            ->from('WebDNAAppBundle:ItemAnalysis', 'ia1')
            ->innerJoin(
                'WebDNAAppBundle:Page',
                'p1',
                'WITH',
                'p1.id=ia1.objectId AND ia1.analysisProcess=:analysisProcess'
            )
            ->where('ia1.type = :type')
            ->andWhere('p1.id' . $qb_sub->expr()->in('', $qb_sub->getDQL()));
        $qb->setParameters(
            [
                'type' => ItemAnalysis::TYPE_PAGE,
                'analysisProcess' => $previousAnalysisProcess->getId(),
            ]
        );

        return $qb->getQuery()->getResult();
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @return array
     */
    public function findAllByAnalysisProcess(AnalysisProcess $analysisProcess)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select(
                'ia, ia.id as itemAnalysisId, p.id AS pageId, IDENTITY(p.website) as websiteId'
            )
            ->from('WebDNAAppBundle:Page', 'p')
            ->innerJoin(
                'WebDNAAppBundle:ItemAnalysis',
                'ia',
                'WITH',
                'p.id=ia.objectId AND ia.analysisProcess=:analysisProcess'
            )
            ->leftJoin(
                'WebDNAAppBundle:ItemMetric',
                'im',
                'WITH',
                'im.itemAnalysis=ia.id'
            )
            ->where('ia.status = :status')
            ->groupBy('p.id')
            ->setParameters(
                [
                    'website' => $analysisProcess->getWebsite(),
                    'analysisProcess' => $analysisProcess->getId(),
                    'status' => ItemAnalysis::STATUS_COMPLETED
                ]
            );

        return $qb->getQuery()->getResult();
    }

    /**
     * @param array $itemsIds
     * @return ItemAnalysis[]
     */
    public function getPagesIdsFromItemsIds(array $itemsIds)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select(
                'p'
            )
            ->from('WebDNAAppBundle:Page', 'p')
            ->innerJoin(
                'WebDNAAppBundle:ItemAnalysis',
                'ia',
                'WITH',
                'p.id=ia.objectId'
            )
            ->where('ia.id IN(:ids)')
            ->setParameters(
                [
                    'ids' => $itemsIds
                ]
            );

        return $qb->getQuery()->getResult();
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @return mixed
     */
    public function getItemAnalyzesIds(AnalysisProcess $analysisProcess)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('ia.id')
            ->from('WebDNAAppBundle:Page', 'p')
            ->join('WebDNAAppBundle:ItemAnalysis', 'ia', 'WITH', 'ia.objectId=p.id')
            ->where('ia.analysisProcess = :analysisProcess')
            ->andWhere('ia.status = :status')
            ->andWhere('ia.type = :type')
            ->groupBy('p.id')
            ->orderBy('p.url', 'ASC')
            ->setParameters(
                [
                    'analysisProcess' => $analysisProcess->getId(),
                    'status' => ItemAnalysis::STATUS_COMPLETED,
                    'type' => ItemAnalysis::TYPE_PAGE
                ]
            );

        $result = $qb->getQuery()->getResult();
        $ids = array();
        foreach ($result as $item) {
            $ids[] = $item['id'];
        }

        return $ids;
    }
}
