<?php

namespace WebDNA\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

use WebDNA\Bundle\AppBundle\Entity\Page;
use WebDNA\Bundle\AppBundle\Entity\Website;
use WebDNA\Bundle\AppBundle\Repository\Interfaces\PageRepositoryInterface;
use WebDNA\Bundle\AppBundle\Entity\ItemAnalysis;
use WebDNA\Bundle\AppBundle\Entity\AnalysisProcess;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends EntityRepository implements PageRepositoryInterface
{
    /**
     * @param Page $page
     * @return mixed|void
     */
    public function save(Page $page)
    {
        $this->_em->persist($page);

        return $this->_em->flush();
    }

    /**
     * @param void
     * @return Int
     */
    public function countAll()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT COUNT(p.id) FROM WebDNAAppBundle:Page p')
            ->getSingleScalarResult();
    }

    /**
     * @param int $websiteId
     * @param int $offset
     * @param int $limit
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByWebsite($websiteId, $offset = 0, $limit = 50)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from('WebDNAAppBundle:Page', 'p')
            ->where('p.website = :websiteId')
            ->setParameter('websiteId', $websiteId)
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        return $qb->getQuery()->execute();
    }

    /**
     * @param Website $website
     * @param string $url
     * @return Page|null
     */
    public function findByWebsiteAndUrl(Website $website, $url)
    {
        return $this->findOneBy(array(
            'website' => $website,
            'url' => $url,
        ));
    }

    /**
     * @param Page $page
     * @param Website $website
     * @return object
     */
    public function findDetails(Page $page, Website $website)
    {
        $qb1 = $this->getEntityManager()->createQueryBuilder()
            ->select(
                'p.metaTitle, p.metaDescription, p.metaKeywords, p.url as url, p.httpCode'
            )
            ->from('WebDNAAppBundle:Page', 'p')
            ->where('p.id = :pageId')
            ->setMaxResults(1)
            ->setParameters(['pageId' => $page->getId()]);

        $qb2 = $this->getEntityManager()->createQueryBuilder()
            ->select(
                'li.url as link, li.anchor'
            )
            ->from('WebDNAAppBundle:Page', 'p')
            ->leftJoin('WebDNAAppBundle:Link', 'li', 'WITH', 'li.sourcePage=p.id')
            ->where('p.id = :pageId')
            ->andWhere('li.url LIKE :url')
            ->setMaxResults(1)
            ->setParameters(['pageId' => $page->getId(), 'url' => '%/' . $this->getWebsiteName($website) . '%']);

        $pageData = $qb1->getQuery()->getOneOrNullResult();
        $urlData = $qb2->getQuery()->getOneOrNullResult();

        if (is_array($urlData)) {
            return array_merge($pageData, $urlData);
        } else {
            return $pageData;
        }
    }

    /**
     * @param Page $page
     * @param Website $website
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAnchor(Page $page, Website $website)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select(
                'li.anchor'
            )
            ->from('WebDNAAppBundle:Page', 'p')
            ->leftJoin('WebDNAAppBundle:Link', 'li', 'WITH', 'li.sourcePage=p.id')
            ->where('p.id = :pageId')
            ->andWhere('li.url LIKE :url')
            ->setMaxResults(1)
            ->setParameters(['pageId' => $page->getId(), 'url' => '%/' . $this->getWebsiteName($website) . '%']);

        $result = $qb->getQuery()->getOneOrNullResult();
        if (isset($result['anchor'])) {
            return $result['anchor'];
        } else {
            return null;
        }
    }

    /**
     * @param Website $website
     * @return mixed
     */
    protected function getWebsiteName(Website $website)
    {
        $name_parsed = parse_url($website->getName());
        if (isset($name_parsed['path']) && !isset($name_parsed['host'])) {
            return $name_parsed['path'];
        } else {
            return $name_parsed['host'];
        }
    }

    /**
     * Find pages from ids
     *
     * @param array $ids
     * @param int|null $class
     * @return array|null
     */
    public function getPages(array $ids, $class = null)
    {
        if (!empty($ids)) {
            $qb = $this->getEntityManager()->createQueryBuilder()
                ->select('p')
                ->from('WebDNAAppBundle:Page', 'p')
                ->where('p.id IN(:id)')
                ->setParameter('id', $ids);

            if ($class) {
                $qb
                    ->leftJoin('WebDNAAppBundle:ItemAnalysis', 'ia', 'WITH', 'p.itemAnalysis=ia.id')
                    ->andWhere('ia.class = :class')
                    ->setParameter('class', $class);
            }

            return $qb->getQuery()->getResult();
        } else {
            return null;
        }
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @param array $excluded_websites_ids
     * @return array
     */
    public function getDisavowUrlsByAnalysisProcess(
        AnalysisProcess $analysisProcess,
        array $excluded_websites_ids = null
    ) {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('p.effectiveUrl')
            ->from('WebDNAAppBundle:Page', 'p')
            ->leftJoin('WebDNAAppBundle:ItemAnalysis', 'ia', 'WITH', 'p.itemAnalysis=ia.id')
            ->where('ia.analysisProcess IN(:id)')
            ->andWhere('ia.type = :type')
            ->andWhere('ia.class = :class')
            ->setParameter('id', $analysisProcess->getId())
            ->setParameter('type', ItemAnalysis::TYPE_PAGE)
            ->setParameter('class', ItemAnalysis::CLASS_NEGATIVE);

        if (!empty($excluded_websites_ids)) {
            $qb->andWhere('p.website NOT IN(:websites)')
                ->setParameter('websites', $excluded_websites_ids);
        }

        return $qb->getQuery()->getScalarResult();
    }

    /**
     * @param array $page_ids
     * @return array
     */
    public function getPagesByIds(array $page_ids)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from('WebDNAAppBundle:Page', 'p')
            ->where('p.id IN(:page_ids)')
            ->setParameter('page_ids', $page_ids);

        return $qb->getQuery()->getResult();
    }
}
