<?php

namespace WebDNA\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\QueryBuilder;
use WebDNA\Bundle\AppBundle\Entity\AnalysisProcess;
use WebDNA\Bundle\AppBundle\Entity\ItemAnalysis;
use WebDNA\Bundle\AppBundle\Repository\Interfaces\AnalysisProcessRepositoryInterface;

/**
 * AnalysisProcessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnalysisProcessRepository extends EntityRepository implements AnalysisProcessRepositoryInterface
{
    /**
     * @param $status
     * @return AnalysisProcess[]
     */
    public function findByStatus($status)
    {
        return parent::findByStatus($status);
    }

    /**
     * @param int $status
     * @param \DateTime $dateStart
     * @param \DateTime $dateEnd
     * @return AnalysisProcess[]
     */
    public function findByStatusWithDateRange($status, \DateTime $dateStart, \DateTime $dateEnd)
    {
        return $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('ap')
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->where('ap.created BETWEEN :start AND :end')
            ->andWhere('ap.status = :status')
            ->orderBy('ap.created', 'DESC')
            ->setParameters(['start' => $dateStart, 'end' => $dateEnd, 'status' => $status])
            ->getQuery()
            ->getResult();
    }

    /**
     * @param integer $websiteId
     * @param integer $status
     * @return AnalysisProcess
     */
    public function findOneByWebsiteAndStatus($websiteId, $status)
    {
        return parent::findOneBy(['website' => $websiteId, 'status' => $status], ['created' => 'desc']);
    }

    /**
     * @param int $offset
     * @param int $limit
     * @param array $orderBy
     * @param array $criteria
     * @return mixed
     */
    public function findAll($offset = 0, $limit = 100, array $orderBy = null, array $criteria = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select(
                'ap.id, ap.status, ap.created, ap.finished,
                 w.name as website_name, w.id as website_id,
                 u.username, u.firstName, u.lastName'
            )
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->leftJoin('WebDNAAppBundle:Website', 'w', 'WITH', 'w.id=ap.website')
            ->leftJoin('WebDNAUserBundle:User', 'u', 'WITH', 'u.id=w.user')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        $count = $this->countAllAnalyzes(clone $qb);

        $qb->orderBy('ap.id', 'DESC');

        return $qb->getQuery()->setHint('knp_paginator.count', $count);
    }

    /**
     * @param QueryBuilder $qb
     * @return int
     */
    protected function countAllAnalyzes(QueryBuilder $qb)
    {
        $qb->select('COUNT(ap.id)')
            ->setFirstResult(0)
            ->setMaxResults(1);

        return (int)$qb->getQuery()->getOneOrNullResult()[1];
    }

    /**
     * @param integer $websiteId
     * @return array|null
     */
    public function findOneByWebsite($websiteId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('ap')
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->where('ap.website = :websiteId')
            ->setParameter('websiteId', $websiteId)
            ->orderBy('ap.id', 'DESC')
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param int $websiteId
     * @param int $limit
     * @param boolean $omitStatus
     * @return array|null
     */
    public function findProcessesByWebsite($websiteId, $limit = null, $omitStatus = false)
    {
        $qb = $this->getQueryBuilderByWebsite($websiteId, $limit, $omitStatus);
        $qb->select('ap.id, ap.created, ap.finished, ap.status')
            ->orderBy('ap.id', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param int $websiteId
     * @param boolean $omitStatus
     * @return array|null
     */
    public function countProcessesByWebsite($websiteId, $omitStatus = false)
    {
        $qb = $this->getQueryBuilderByWebsite($websiteId, $omitStatus);
        $qb->select('COUNT(ap.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param int $websiteId
     * @param int $limit
     * @param boolean $omitStatus
     * @return mixed
     */
    protected function getQueryBuilderByWebsite($websiteId, $limit = null, $omitStatus = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->where('ap.website = :websiteId')
            ->setParameter('websiteId', $websiteId);

        if ($limit > 0) {
            $qb->setMaxResults($limit);
        }

        if ($omitStatus === false) {
            $qb->andWhere('ap.status IN(:status)')
                ->setParameter(
                    'status',
                    [
                        AnalysisProcess::STATUS_COMPLETED,
                        AnalysisProcess::STATUS_PROCESSING,
                        AnalysisProcess::STATUS_READY_TO_PROCESS,
                    ]
                );
        }

        return $qb;
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @return mixed|void
     */
    public function save(AnalysisProcess $analysisProcess)
    {
        $this->_em->persist($analysisProcess);

        return $this->_em->flush();
    }

    /**
     * @param void
     * @return Int
     */
    public function countAll()
    {
        return (int)$this->getEntityManager()
            ->createQuery('SELECT COUNT(ap.id) FROM WebDNAAppBundle:AnalysisProcess ap')
            ->getOneOrNullResult();
    }

    /**
     * @param $websiteId
     * @return boolean
     */
    public function isAnyPendingByWebsite($websiteId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(ap.id)')
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->where('ap.website = :websiteId')
            ->andWhere('ap.status != :status')
            ->setParameters(
                [
                    'websiteId' => $websiteId,
                    'status' => AnalysisProcess::STATUS_COMPLETED,
                ]
            );

        return boolval($qb->getQuery()->getSingleScalarResult());
    }

    /**
     * @return \WebDNA\Bundle\AppBundle\Entity\AnalysisProcess[]
     */
    public function findAnalyzesToRepeat()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('ap')
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->where('ap.repeat = :repeat')
            ->andWhere('ap.status IN(:status)');

        $date = new \DateTime();
        $qb->andWhere('ap.repeatAt BETWEEN :date_start AND :date_end');

        $qb->setParameters(
            [
                'status' => [
                    AnalysisProcess::STATUS_PREPARING,
                    AnalysisProcess::STATUS_COMPLETED,
                    AnalysisProcess::STATUS_FAILED,
                ],
                'repeat' => 1,
                'date_start' => $date->format('Y-m-d H:00:00'),
                'date_end' => $date->add(new \DateInterval('P0DT1H'))->format('Y-m-d H:00:00'),
            ]
        );

        return $qb->getQuery()->getResult();
    }

    /**
     * @return \WebDNA\Bundle\AppBundle\Entity\AnalysisProcess[]
     */
    public function findUnRepeatable()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('ap')
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->where('ap.repeat = :repeat')
            ->groupBy('ap.website');

        $qb->setParameter('repeat', 0);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @return AnalysisProcess
     */
    public function findPrevious(AnalysisProcess $analysisProcess)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('ap')
            ->from('WebDNAAppBundle:AnalysisProcess', 'ap')
            ->where('ap.id < :id')
            ->andWhere('ap.website = :website')
            ->andWhere('ap.id != :id')
            ->orderBy('ap.created', 'DESC')
            ->setMaxResults(1);

        $qb->setParameters(['id' => $analysisProcess->getId(), 'website' => $analysisProcess->getWebsite()->getId()]);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
