<?php

namespace WebDNA\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

use WebDNA\Bundle\AppBundle\Entity\Notification;
use WebDNA\Bundle\AppBundle\Repository\Interfaces\NotificationRepositoryInterface;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository implements NotificationRepositoryInterface
{
    /**
     * @param Notification $notification
     * @return mixed|void
     */
    public function save(Notification $notification)
    {
        $this->_em->persist($notification);

        return $this->_em->flush();
    }

    /**
     * @param void
     * @return Int
     */
    public function countAll()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT COUNT(p.id) FROM WebDNAAppBundle:Notification p')
            ->getSingleScalarResult();
    }

    /**
     * @param int $objectId
     * @param int $type
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getStatusByObjectAndType($objectId, $type)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('n.status')
            ->from('WebDNAAppBundle:Notification', 'n')
            ->andWhere('n.objectId = :objectId')
            ->andWhere('n.type = :type')
            ->setParameters(
                new ArrayCollection(
                    array(
                        new Parameter('objectId', $objectId),
                        new Parameter('type', $type),
                    )
                )
            );

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @return array
     */
    public function getNotSentNotifications()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('n')
            ->from('WebDNAAppBundle:Notification', 'n')
            ->where('n.type = :type')
            ->andWhere('n.status = :status')
            ->setParameters(
                ['type' => Notification::TYPE_ANALYSIS_COMPLETED, 'status' => Notification::STATUS_NOT_SENT]
            );

        return $qb->getQuery()->getResult();
    }
}
