<?php

namespace WebDNA\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

use WebDNA\Bundle\AppBundle\Entity\AnalysisProcess;
use WebDNA\Bundle\AppBundle\Entity\ItemAnalysis;
use WebDNA\Bundle\AppBundle\Entity\ItemMetric;
use WebDNA\Bundle\AppBundle\Repository\Interfaces\ItemMetricRepositoryInterface;

/**
 * ItemMetricRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemMetricRepository extends EntityRepository implements ItemMetricRepositoryInterface
{
    /**
     * @param ItemMetric $itemMetric
     * @return mixed|void
     */
    public function save(ItemMetric $itemMetric)
    {
        $this->_em->persist($itemMetric);

        return $this->_em->flush();
    }

    /**
     * @param void
     * @return Int
     */
    public function countAll()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT COUNT(im.id) FROM WebDNAAppBundle:ItemMetric im')
            ->getSingleScalarResult();
    }

    /**
     * @param array $item_analysis_ids
     * @return array|null
     */
    public function getMetricsByItemsAnalysesIds(array $item_analysis_ids)
    {
        if (!empty($item_analysis_ids)) {
            $qb = $this->getEntityManager()->createQueryBuilder()
                ->select('im, IDENTITY(im.itemAnalysis)')
                ->from('WebDNAAppBundle:ItemMetric', 'im')
                ->where('im.itemAnalysis IN(:ids)')
                ->setParameter('ids', $item_analysis_ids);
            $metrics = $qb->getQuery()->getArrayResult();
            $output = [];
            foreach ($metrics as $metric) {
                $output[$metric[1]][$metric[0]['id']] = $metric[0];
            }
            return $output;
        } else {
            return null;
        }
    }

    /**
     * @param ItemAnalysis $itemAnalysis
     * @return array
     */
    public function getMetricsByItemAnalysis(ItemAnalysis $itemAnalysis)
    {
        return $this->getMetricsByItemsAnalysesIds([$itemAnalysis->getId()]);
    }

    /**
     * @param array $item_analysis_ids
     * @return array
     */
    public function getMetricsByItemAnalysisIdsTypeKey(array $item_analysis_ids)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('im')
            ->from('WebDNAAppBundle:ItemMetric', 'im')
            ->where('im.itemAnalysis IN(:ids)')
            ->setParameter('ids', $item_analysis_ids);

        $metrics = $qb->getQuery()->getArrayResult();

        $output = [];
        if (count($metrics)) {
            foreach ($metrics as $metric) {
                $output[$metric['type']] = $metric;
            }
        }

        return $output;
    }

    /**
     * @param AnalysisProcess $analysisProcess
     * @return mixed
     */
    public function getSummary(AnalysisProcess $analysisProcess)
    {
        return $this->getEntityManager()
            ->createQuery('
                SELECT
                    im.type,
                    SUM(im.value_numeric_1) AS value_numeric_1,
                    SUM(im.value_numeric_2) AS value_numeric_2,
                    SUM(im.value_numeric_3) AS value_numeric_3,
                    SUM(im.value_numeric_4) AS value_numeric_4,
                    SUM(im.value_numeric_5) AS value_numeric_5
                FROM
                    WebDNAAppBundle:ItemMetric im
                JOIN
                    im.itemAnalysis ia
                WHERE
                    ia.analysisProcess = ' . $analysisProcess->getId() . '
                GROUP BY
                    im.type')
            ->getResult(Query::HYDRATE_ARRAY);
    }
}
